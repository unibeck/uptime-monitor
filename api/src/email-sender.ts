import { EmailMessage } from "cloudflare:email";
import { createMimeMessage, type MimeMessage } from "mimetext";

// Define a type for the environment variables we expect for email sending
// This should align with what's available in the CloudflareEnv interface used by the caller
interface EmailEnv {
  EMAIL_SEND_BINDING: {
    send: (message: EmailMessage) => Promise<void>;
  };
  // Optional: Define the sender email address via env var if it's not fixed
  // SENDER_EMAIL_ADDRESS?: string; 
}

interface SendNotificationEmailParams {
  to: string;
  subject: string;
  htmlBody: string;
  textBody: string;
  env: EmailEnv; // Use the specific EmailEnv type
  // Optional: fromAddress can be passed if not using a fixed one from env
  // fromAddress?: string; 
}

// Default sender address - replace with your actual verified sender
const DEFAULT_SENDER_ADDRESS = "noreply@yourdomain.com"; // IMPORTANT: Replace with your domain

export async function sendNotificationEmail({
  to,
  subject,
  htmlBody,
  textBody,
  env,
}: SendNotificationEmailParams): Promise<void> {
  // const senderAddress = env.SENDER_EMAIL_ADDRESS || DEFAULT_SENDER_ADDRESS;
  // For now, using the hardcoded default. Ensure this domain is verified in Cloudflare.
  const senderAddress = DEFAULT_SENDER_ADDRESS;

  if (!env.EMAIL_SEND_BINDING) {
    console.error("EMAIL_SEND_BINDING is not available in the environment.");
    throw new Error("Email sending service is not configured.");
  }

  try {
    const msg: MimeMessage = createMimeMessage();
    msg.setSender({ name: "SolStatus Notifications", addr: senderAddress });
    msg.setRecipient(to);
    msg.setSubject(subject);

    // Add both text and HTML parts for multipart/alternative
    msg.addMessage({
      contentType: "text/plain",
      data: textBody,
    });
    msg.addMessage({
      contentType: "text/html",
      data: htmlBody,
    });

    // Construct EmailMessage for Cloudflare Worker
    // The raw email content is generated by mimetext
    const emailMessage = new EmailMessage(senderAddress, to, msg.asRaw());

    console.log(`Attempting to send email to: ${to}, Subject: ${subject}`);
    await env.EMAIL_SEND_BINDING.send(emailMessage);
    console.log(`Email successfully sent to: ${to}`);

  } catch (error) {
    console.error(`Failed to send email to ${to}:`, error);
    // Re-throw the error or handle it as per application's error handling strategy
    // For example, you might want to log this to an external monitoring service
    if (error instanceof Error) {
      throw new Error(`Email sending failed: ${error.message}`);
    }
    throw new Error("Email sending failed due to an unknown error.");
  }
}
